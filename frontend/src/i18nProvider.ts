//Source code generated by AppGPT (www.appgpt.tech)
import { mergeTranslations } from 'ra-core';
import polyglotI18nProvider from 'ra-i18n-polyglot';
import enOriginal from 'ra-language-english';
import frOriginal from 'ra-language-french';

const enResources = {
  resources: {
    Users: {
      name: 'Users',
      fields: {
        name: 'Name',
        contactDetails: 'Contact Details',
        avatar: 'Avatar',
        emailNotifications: 'Email Notifications',
        password: 'Password',
        privacyPreferences: 'Privacy Preferences',
        bookings: 'Bookings',
        paymentMethods: 'Payment Methods',
        tripHistory: 'Trip History',
        id: 'id',
      },
    },
    Drivers: {
      name: 'Drivers',
      fields: {
        profileInformation: 'Profile Information',
        accountSettings: 'Account Settings',
        vehicles: 'Vehicles',
        bookings: 'Bookings',
        tripHistory: 'Trip History',
        earnings: 'Earnings',
        navigation: 'Navigation',
        id: 'id',
      },
    },
    Rides: {
      name: 'Rides',
      fields: {
        dateAndTime: 'Date And Time',
        origin: 'Origin',
        destination: 'Destination',
        driverRiderInformation: 'Driver Rider Information',
        rideType: 'Ride Type',
        status: 'Status',
        cost: 'Cost',
        id: 'id',
      },
    },
    Vehicles: {
      name: 'Vehicles',
      fields: {
        vehicleInformation: 'Vehicle Information',
        vehicleDetails: 'Vehicle Details',
        photos: 'Photos',
        verificationDocuments: 'Verification Documents',
        availability: 'Availability',
        id: 'id',
      },
    },
    Payments: {
      name: 'Payments',
      fields: {
        paymentMethods: 'Payment Methods',
        defaultPaymentMethod: 'Default Payment Method',
        paymentHistory: 'Payment History',
        driverPayout: 'Driver Payout',
        id: 'id',
      },
    },
  },
};
const frResources = {
  resources: {
    Users: {
      name: 'Users (fr)',
      fields: {
        name: 'Name (fr)',
        contactDetails: 'Contact Details (fr)',
        avatar: 'Avatar (fr)',
        emailNotifications: 'Email Notifications (fr)',
        password: 'Password (fr)',
        privacyPreferences: 'Privacy Preferences (fr)',
        bookings: 'Bookings (fr)',
        paymentMethods: 'Payment Methods (fr)',
        tripHistory: 'Trip History (fr)',
        id: 'id',
      },
    },
    Drivers: {
      name: 'Drivers (fr)',
      fields: {
        profileInformation: 'Profile Information (fr)',
        accountSettings: 'Account Settings (fr)',
        vehicles: 'Vehicles (fr)',
        bookings: 'Bookings (fr)',
        tripHistory: 'Trip History (fr)',
        earnings: 'Earnings (fr)',
        navigation: 'Navigation (fr)',
        id: 'id',
      },
    },
    Rides: {
      name: 'Rides (fr)',
      fields: {
        dateAndTime: 'Date And Time (fr)',
        origin: 'Origin (fr)',
        destination: 'Destination (fr)',
        driverRiderInformation: 'Driver Rider Information (fr)',
        rideType: 'Ride Type (fr)',
        status: 'Status (fr)',
        cost: 'Cost (fr)',
        id: 'id',
      },
    },
    Vehicles: {
      name: 'Vehicles (fr)',
      fields: {
        vehicleInformation: 'Vehicle Information (fr)',
        vehicleDetails: 'Vehicle Details (fr)',
        photos: 'Photos (fr)',
        verificationDocuments: 'Verification Documents (fr)',
        availability: 'Availability (fr)',
        id: 'id',
      },
    },
    Payments: {
      name: 'Payments (fr)',
      fields: {
        paymentMethods: 'Payment Methods (fr)',
        defaultPaymentMethod: 'Default Payment Method (fr)',
        paymentHistory: 'Payment History (fr)',
        driverPayout: 'Driver Payout (fr)',
        id: 'id',
      },
    },
  },
};

const en = mergeTranslations(enOriginal, enResources);
const fr = mergeTranslations(frOriginal, frResources);

const translations = { en, fr };
export const i18nProvider = polyglotI18nProvider(
  (locale) => translations[locale],
  'en', //default locale
  [
    { locale: 'en', name: 'English' },
    { locale: 'fr', name: 'Fran√ßais' },
  ],
);
